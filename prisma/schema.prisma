// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Session {
  sessionToken String   @id @default(cuid())
  userId       String
  expiration   DateTime
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  username      String      @unique
  passwordHash  String
  following     Following[]
  volunteering  Volunteers[]
  volunteerRequest VolunteeringRequest[]
  receiveEmails Boolean     @default(false)
}

model Organization {
  id               String      @id @default(cuid())
  ownerId          String //a user Id; might make it its own model
  organizationName String      @unique
  description      String?
  followers        Following[]
  volunteers       Volunteers[]
  volunteerRequests VolunteeringRequest[]
  volunteerHours VolunteerLog[]
}

model Event {
  id             String   @id @default(cuid())
  eventName      String   @unique
  organizationId String //could make this its own model but events can olny have one host so... keep it like this
  timeOfEvent    DateTime
  placeOfEvent   String
  description    String
}

// user follows an org
// need own data base for many users and follow many databases
model Following {
  user          User         @relation(fields: [userID], references: [id])
  userID        String
  org           Organization @relation(fields: [orgID], references: [id])
  orgID         String
  receiveEmails Boolean      @default(true) // org can talk to you
  receiveAlerts Boolean      @default(true) // will be aleted of event creation

  @@id([userID, orgID])
}

model Volunteers {
  user          User         @relation(fields: [userID], references: [id])
  userID        String
  org           Organization @relation(fields: [orgID], references: [id])
  orgID         String
  hourLogs      VolunteerLog[]

  @@id([userID, orgID]) // Composite primary key ensures user-org uniqueness
}

model VolunteeringRequest {
  user          User         @relation(fields: [userID], references: [id])
  userID        String
  org           Organization @relation(fields: [orgID], references: [id])
  orgID         String
  messesage     String

  @@id([userID, orgID])
}

model VolunteerLog {
  id              String       @id @default(cuid())
  org             Organization @relation(fields: [orgID], references: [id])
  orgID           String
  volunteer       Volunteers   @relation(fields: [volunteerUserID, volunteerOrgID], references: [userID, orgID])
  volunteerUserID String
  volunteerOrgID  String
  startTime       DateTime
  endTime         DateTime?

  @@index([volunteerUserID, volunteerOrgID]) // Optimizes queries on composite foreign key
}